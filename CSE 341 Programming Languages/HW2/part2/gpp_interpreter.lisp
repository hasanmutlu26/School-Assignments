(defun gppinterpreter (filename)
    (defvar result)
    (defvar myList (list))
    (let ((in (open filename :if-does-not-exist nil)))
        (when in
            (defvar buffer (read-char in nil))
            (cond ((string-not-equal buffer "(")
                (format t "SYNTAX_ERROR Expression not recognized")
                (return-from gppinterpreter))
            )
            (setq buffer (read in nil))

            (cond
                ((string-equal buffer "+")
                    (defvar num1 (read in nil))
                    (defvar num2 (read in nil))
                    (setq result (+ num1 num2))
                    (format t "Syntax OK.~%Result: ~d~%" result)
                )

                ((string-equal buffer "-")
                    (defvar num1 (read in nil))
                    (defvar num2 (read in nil))
                    (setq result (- num1 num2))
                    (format t "Syntax OK.~%Result: ~d~%" result)
                )

                ((string-equal buffer "*")
                    (defvar num1 (read in nil))
                    (defvar num2 (read in nil))
                    (setq result (* num1 num2))
                    (format t "Syntax OK.~%Result: ~d~%" result)
                )

                ((string-equal buffer "/")
                    (defvar num1 (read in nil))
                    (defvar num2 (read in nil))
                    (setq result (/ num1 num2))
                    (format t "Syntax OK.~%Result: ~d~%" result)
                )

                ((string-equal buffer "and")
                    (defvar num1 (read in nil))
                    (defvar num2 (read in nil))
                    (setq result (and num1 num2))
                    (format t "Syntax OK.~%Result: ~d~%" result)
                )

                ((string-equal buffer "or")
                    (defvar num1 (read in nil))
                    (defvar num2 (read in nil))
                    (setq result (or num1 num2))
                    (format t "Syntax OK.~%Result: ~d~%" result)
                )

                ((string-equal buffer "not")
                    (defvar num1 (read in nil))
                    (cond
                        ((string-equal num1 "true")
                            (setq num1 T)
                        )
                        ((string-equal num1 "false")
                            (setq num1 NIL)
                        )
                        ((string-equal "x" "x")
                            (format t "SYNTAX_ERROR Expression not recognized~%")
                            (return-from gppinterpreter)
                        )
                    )
                    (setq result (not num1))
                    (cond
                        ((equal result T)
                            (format t "Syntax OK.~%Result: true~%")
                        )
                        ((equal result NIL)
                            (format t "Syntax OK.~%Result: false~%")
                        )
                    )
                )

                ((string-equal buffer "equal")
                    (defvar num1 (read in nil))
                    (defvar num2 (read in nil))
                    (setq result (equal num1 num2))
                    (cond
                        ((equal result T)
                            (format t "Syntax OK.~%Result: true~%")
                        )
                        ((equal result NIL)
                            (format t "Syntax OK.~%Result: false~%")
                        )
                    )
                )

                ((string-equal buffer "list")
                    (loop for i from 1 to 3
                        do  (setq buffer (read in nil))
                            (format t "~a~%" buffer)
                            (push buffer myList)
                    )
                    (format t "Syntax OK.~%Result: (" )
                    (loop for i in myList
                        do (format t "~a " i)
                    )
                    (format t ")~%")
                )

                ((= 1 1)
                    (format t "zort~%")
                )
            )

            (close in))
    )
)

;;Enter a file name.
(defvar filename (read))
(gppinterpreter filename)